import sys
from langchain_community.llms import Ollama
from crewai import Agent, Task, Crew, Process

email = sys.argv[1]  # Take email content from command line argument

model = Ollama( model = "llama3")


# Agents xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
requirement_analyzer = Agent(
    role="requirement analyzer",
    goal="Accurately analyze client requirements from example offers to identify the type of application, necessary technologies, and main functionalities required.",
    backstory="You are an AI assistant whose job is to analyze client requirements from example offers and provide a detailed summary.",
    verbose=True,
    allow_delegation=False,
    llm=model
)
ai_trainer = Agent(
    role="AI trainer",
    goal="Use an open-source language model to train the AI to understand client requirements and generate structured offers.",
    backstory="You are an AI assistant trained to generate detailed offers for clients based on previous examples.",
    verbose=True,
    allow_delegation=False,
    llm=model
)
offer_generator = Agent(
    role="offer generator",
    goal="Generate a detailed offer for the client including application description, technologies used, and detailed tasks for development.",
    backstory="You are an AI assistant that creates comprehensive offers for clients based on analyzed requirements.",
    verbose=True,
    allow_delegation=False,
    llm=model
)
offer_validator = Agent(
    role="offer validator",
    goal="Review and validate the generated offer to ensure it meets all client requirements and conforms to the structure of example offers.",
    backstory="You are an AI assistant that reviews and validates offers generated by other agents to ensure quality and compliance.",
    verbose=True,
    allow_delegation=False,
    llm=model
)

# Tasks xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
analyze_requirements = Task(
    description="Analyze the following client requirements: '{email}' to identify application type, necessary technologies, and main functionalities.",
    agent=requirement_analyzer,
    expected_output="A detailed summary of the client requirements, including application type, necessary technologies, and main functionalities."
)
train_ai = Task(
    description="Train the AI using the following analyzed requirements: '{analyze_requirements}' to generate structured offers.",
    agent=ai_trainer,
    expected_output="A trained AI model capable of generating structured offers."
)
generate_offer = Task(
    description="Generate a detailed offer based on the following client request: '{email}' and analyzed requirements: '{analyze_requirements}'.",
    agent=offer_generator,
    expected_output="A detailed offer including application description, technologies used, and detailed tasks for development."
)
validate_offer = Task(
    description="Review and validate the following generated offer: '{generate_offer}' to ensure it meets all client requirements and conforms to example offers.",
    agent=offer_validator,
    expected_output="A validated offer that meets all client requirements and conforms to example offers."
)






crew = Crew(
    agents=[requirement_analyzer, ai_trainer, offer_generator, offer_validator],
    tasks=[analyze_requirements, train_ai, generate_offer, validate_offer],
    verbose=2,
    process=Process.sequential
)

output = crew.kickoff()
print(output)